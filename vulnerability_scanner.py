import socket

#inserimento ip e range di porte

target = input("inserisci indirizzo IP da scansire:")
portrange = input("inserisci il port range da scansire (di default scansiona tutte le porte):")


#di default, imposta tutto il range di porte disponibili, dalla 0 alla 65535
if (portrange == ""):
    lowport = 0
    highport = 65535
else:
    lowport = int(portrange.split('-')[0])
    highport = int(portrange.split('-')[1])


#stampa scansione in corso delle porte
print("\nscansione host", target, "dalla porta", lowport, "alla porta", highport)

#creazione lista per riepilogo finale
porte_aperte = []

#ciclo for per scansionare tutte le porte nel range richiesto
for port in range(lowport, highport + 1):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(0.00000001)
    status = s.connect_ex((target, port))
    
    #se lo status è 0, la porta è aperta e stampa il relativo messaggio
    if status == 0:
        print("   ***PORTA" , port, " APERTA ***")
        try:
        
        #nel riepilogo porte, abbiamo inserito anche la destinazione della porta. se non è una well-known port, stampa solo il numero della porta.
            stringa_porte = f"{port} ( {socket.getservbyport(port)} )"
        except:
            stringa_porte = f"{port}"
            
            #ogni porta aperta, va ad aggiornare il file porte_aperte
        porte_aperte.append(stringa_porte)
    else:
    	
    	#se lo status non è 0, la porta è chiusa con relativo messaggio
        print('- PORTA', port,  " CHIUSA")
        
        #chiusura socket
    s.close()

#riepilogo scansione
print("\nscan host", target, "dalla porta", lowport, "alla porta", highport, "terminata.\n")

#se ci sono porte aperte, stampa il riepilogo con relativa destinazione porte
if porte_aperte:
    print("\nRiepilogo porte aperte: ")
    print(", ".join(porte_aperte))

else:
    print("\nnessuna porta aperta trovata")
